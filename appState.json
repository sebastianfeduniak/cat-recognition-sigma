{
  "EDITOR_STATE": {
    "allProjectFiles": {
      "0d982568-3e10-4b4f-a0c5-658fae6474a0": {
        "id": "0d982568-3e10-4b4f-a0c5-658fae6474a0",
        "parent": null,
        "name": "cat-recognition-sigma",
        "type": "DIRECTORY",
        "isDirectory": true,
        "children": [
          "4f0792e6-a77f-4ce3-b6e9-12bc66344c68",
          "62473a78-42da-4e17-8f3b-d1be07bf9ab5",
          "e592c9ea-eebe-46f9-ace0-851f83c01656",
          "e0bc3aec-dd97-4828-ac6f-89e8454a4000"
        ],
        "isRemovable": false,
        "filePath": "cat-recognition-sigma"
      },
      "4f0792e6-a77f-4ce3-b6e9-12bc66344c68": {
        "id": "4f0792e6-a77f-4ce3-b6e9-12bc66344c68",
        "parent": "0d982568-3e10-4b4f-a0c5-658fae6474a0",
        "name": "classification.js",
        "type": "JS_LAMBDA",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "cat-recognition-sigma/classification.js",
        "code": "'use strict';\n\nconst persistence = require('./persistence');\nconst recognition = require('./recognition');\n\nmodule.exports.handler = async (event, _context) => {\n\n    console.log('Received event: %j', event);\n\n    const filesToBeChecked = module.exports.recordsToFiles(module.exports.filterEvents(event));\n    for (var i = 0; i< filesToBeChecked.length; ++i){\n        let fileName = filesToBeChecked[i]\n        await persistence.putStatus(fileName, false, 'new')\n        try {\n            let recognitionStatus = await recognition.check(fileName)\n            await persistence.putStatus(fileName, true, recognitionStatus)\n            console.log(\"Recognition success. Status updated.\")\n        } catch (error) {\n            console.log(error);\n            await persistence.putStatus(fileName, true, 'error')\n            console.log(\"Recognition error. Status updated.\")\n        }\n    }\n}\n\nmodule.exports.filterEvents = (s3Events) => {\n    const records = s3Events['Records'];\n    const fileAddedEvents = records.filter(function (event) {\n        return event['eventName'] == 'ObjectCreated:Put'\n    });\n    return fileAddedEvents;\n};\n\nmodule.exports.recordsToFiles = (s3Records) => {\n    return s3Records.map(function (record) {\n        return record['s3']['object']['key'];\n    });\n};",
        "config": {
          "runtime": "nodejs8.10",
          "handler": "handler",
          "timeout": 60,
          "memory": 128,
          "layers": []
        },
        "triggers": [
          {
            "resourceName": "s3serverlessCatDetectorImgRepoSigma",
            "config": {
              "type": "s3:ObjectCreated:*",
              "keyPrefix": "",
              "keySuffix": ""
            }
          }
        ],
        "testCases": {
          "6ba6cb6c-f572-4e70-9f6c-2f1aafc5b1ab": {
            "id": "6ba6cb6c-f572-4e70-9f6c-2f1aafc5b1ab",
            "name": "Sample1",
            "functionId": "4f0792e6-a77f-4ce3-b6e9-12bc66344c68",
            "event": "{\n    \"Records\": [\n        {\n            \"eventVersion\": \"2.1\",\n            \"eventSource\": \"aws:s3\",\n            \"awsRegion\": \"eu-west-1\",\n            \"eventTime\": \"2019-08-05T12:18:06.096Z\",\n            \"eventName\": \"ObjectCreated:Put\",\n            \"userIdentity\": {\n                \"principalId\": \"AWS:AIDAIHXQW7B7ETWPB2XGA\"\n            },\n            \"requestParameters\": {\n                \"sourceIPAddress\": \"193.25.0.11\"\n            },\n            \"responseElements\": {\n                \"x-amz-request-id\": \"C98081680E39E6DB\",\n                \"x-amz-id-2\": \"LBBxxTbzBOfEU3U7Z8fNkmLPvbAJo08dSCQ5eugQFHDJJz+93q8Dp1NNENaQfOhFO6jwjtZlqqY=\"\n            },\n            \"s3\": {\n                \"s3SchemaVersion\": \"1.0\",\n                \"configurationId\": \"1460218c-b8f9-4a05-b51c-8a66c09e7191\",\n                \"bucket\": {\n                    \"name\": \"serverless-cat-detector-img-repo-sigma\",\n                    \"ownerIdentity\": {\n                        \"principalId\": \"A21S5DT0VLDI06\"\n                    },\n                    \"arn\": \"arn:aws:s3:::serverless-cat-detector-img-repo-sigma\"\n                },\n                \"object\": {\n                    \"key\": \"Cat03.jpg\",\n                    \"size\": 156145,\n                    \"eTag\": \"63003ac4690522da8571d37c7879be68\",\n                    \"sequencer\": \"005D481E7DF6847D84\"\n                }\n            }\n        }\n    ]\n}\n"
          },
          "ba877067-f939-4677-b920-01ff4285f3d9": {
            "id": "ba877067-f939-4677-b920-01ff4285f3d9",
            "name": "Sample2",
            "functionId": "4f0792e6-a77f-4ce3-b6e9-12bc66344c68",
            "event": "{\n    \"Records\": [\n        {\n            \"eventVersion\": \"2.1\",\n            \"eventSource\": \"aws:s3\",\n            \"awsRegion\": \"eu-west-1\",\n            \"eventTime\": \"2019-08-06T15:02:13.205Z\",\n            \"eventName\": \"ObjectCreated:Put\",\n            \"userIdentity\": {\n                \"principalId\": \"AWS:AIDAIHXQW7B7ETWPB2XGA\"\n            },\n            \"requestParameters\": {\n                \"sourceIPAddress\": \"193.25.0.11\"\n            },\n            \"responseElements\": {\n                \"x-amz-request-id\": \"040BAC1EA1722A1F\",\n                \"x-amz-id-2\": \"tdj8KUFsnim5FRuA797Y/7c6yqKkkrSn0fRx7oEUsCML/p/HH22nam8QgpGsInQGZfyaRiHlrJ0=\"\n            },\n            \"s3\": {\n                \"s3SchemaVersion\": \"1.0\",\n                \"configurationId\": \"1460218c-b8f9-4a05-b51c-8a66c09e7191\",\n                \"bucket\": {\n                    \"name\": \"serverless-cat-detector-img-repo-sigma\",\n                    \"ownerIdentity\": {\n                        \"principalId\": \"A21S5DT0VLDI06\"\n                    },\n                    \"arn\": \"arn:aws:s3:::serverless-cat-detector-img-repo-sigma\"\n                },\n                \"object\": {\n                    \"key\": \"Seba.jpg\",\n                    \"size\": 293501,\n                    \"eTag\": \"d62c0d7a74a2384c8abac5a2897788ea\",\n                    \"sequencer\": \"005D4996751D22B7B8\"\n                }\n            }\n        }\n    ]\n}"
          }
        }
      },
      "62473a78-42da-4e17-8f3b-d1be07bf9ab5": {
        "id": "62473a78-42da-4e17-8f3b-d1be07bf9ab5",
        "parent": "0d982568-3e10-4b4f-a0c5-658fae6474a0",
        "name": "recognition.js",
        "type": "JS_FILE",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "cat-recognition-sigma/recognition.js",
        "code": "'use strict';\n\nconst config = require('./config');\nconst AWSXRay = require('aws-xray-sdk');\nconst AWS = AWSXRay.captureAWS(require('aws-sdk'));\nconst rekognition = new AWS.Rekognition();\n\nmodule.exports.check = async (fileName) => {\n    const params = {\n        Image: {\n            S3Object: {\n                Bucket: config().serverless_cat_detector_img_repo,\n                Name: fileName\n            }\n        },\n        MaxLabels: 10,\n        MinConfidence: 60\n    };\n    return module.exports.imageLabel(await rekognition.detectLabels(params).promise())\n};\n\nmodule.exports.imageLabel = (data) => {\n    const isCat = module.exports.isCatRecognized(data);\n    if (isCat) {\n        return 'cat';\n    } else {\n        return 'other';\n    }\n};\n\nmodule.exports.isCatRecognized = (rawLabels) => {\n    const labels = rawLabels.Labels;\n    return labels.some(function (label) { return label.Name == 'Cat' });\n};"
      },
      "e592c9ea-eebe-46f9-ace0-851f83c01656": {
        "id": "e592c9ea-eebe-46f9-ace0-851f83c01656",
        "parent": "0d982568-3e10-4b4f-a0c5-658fae6474a0",
        "name": "persistence.js",
        "type": "JS_FILE",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "cat-recognition-sigma/persistence.js",
        "code": "'use strict';\n\nconst config = require('./config');\nconst AWSXRay = require('aws-xray-sdk');\nconst AWS = AWSXRay.captureAWS(require('aws-sdk'));\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nmodule.exports.dbItem = (fileName, scanned, scanningStatus) => {\n    return {\n        TableName: config().serverless_cat_detector_results_table,\n        Item: {\n            'name': fileName,\n            'checked': scanned,\n            'status': scanningStatus\n        }\n    };\n};\n\nmodule.exports.putStatus = (fileName, scanned, scanningStatus) => {\n    const statusItem = module.exports.dbItem(fileName, scanned, scanningStatus);\n    return dynamoDb.put(statusItem).promise();\n};\n\nmodule.exports.getStatusOfAll = async () => {\n    const params = {\n        TableName: config().serverless_cat_detector_results_table,\n        AttributesToGet: [\"name\", \"checked\", \"status\"]\n    };\n    return (await dynamoDb.scan(params).promise()).Items;\n}"
      },
      "e0bc3aec-dd97-4828-ac6f-89e8454a4000": {
        "id": "e0bc3aec-dd97-4828-ac6f-89e8454a4000",
        "parent": "0d982568-3e10-4b4f-a0c5-658fae6474a0",
        "name": "config.js",
        "type": "JS_FILE",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "cat-recognition-sigma/config.js",
        "code": "'use strict';\n\nmodule.exports = () => {\n    var img_repo = process.env.BUCKET || 'serverless-cat-detector-img-repo-sigma';\n    var results_table = process.env.TABLE || 'ServerlessCatDetectorStatusSigma';\n\n    return {\n        serverless_cat_detector_img_repo: img_repo,\n        serverless_cat_detector_results_table: results_table\n    };\n};\n"
      }
    },
    "deletedFiles": [],
    "rootNode": "0d982568-3e10-4b4f-a0c5-658fae6474a0",
    "openFiles": [
      "e592c9ea-eebe-46f9-ace0-851f83c01656",
      "e0bc3aec-dd97-4828-ac6f-89e8454a4000",
      "62473a78-42da-4e17-8f3b-d1be07bf9ab5",
      "4f0792e6-a77f-4ce3-b6e9-12bc66344c68"
    ],
    "currentFileId": "e592c9ea-eebe-46f9-ace0-851f83c01656",
    "resources": {
      "s3serverlessCatDetectorImgRepoSigma": {
        "name": "s3serverlessCatDetectorImgRepoSigma",
        "type": "S3",
        "config": {
          "mode": 0,
          "bucket": {
            "region": "eu-west-1",
            "name": "serverless-cat-detector-img-repo-sigma"
          }
        }
      },
      "ddbServerlessCatDetectorStatusSigma": {
        "name": "ddbServerlessCatDetectorStatusSigma",
        "type": "DynamoDB",
        "config": {
          "mode": 0,
          "operation": "put",
          "table": {
            "arn": "",
            "name": "ServerlessCatDetectorStatusSigma",
            "partitionKey": "name",
            "partitionKeyType": "S",
            "hasSortKey": false,
            "sortKey": "",
            "sortKeyType": "S",
            "payPerRequest": true,
            "mode": 0
          },
          "isGlobalEditMode": false,
          "parameters": {
            "Key": {},
            "Item": {
              "name": "test"
            },
            "ExpressionAttributeValues": {}
          },
          "triggerParams": {},
          "validator": {
            "validatableFields": {},
            "validity": true
          },
          "valid": true
        }
      }
    },
    "customTemplate": {
      "dialect": "CloudFormation",
      "definitions": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Resources": {
          "catRecognitionSigmaclassificationExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ],
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Action": [
                      "sts:AssumeRole"
                    ],
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    }
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "CatRekognitionFullDynamo",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:*",
                          "rekognition:*",
                          "s3:*"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "ServerlessCatDetectorStatusSigma": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "name",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "name",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": "5",
                "WriteCapacityUnits": "5"
              },
              "TableName": "ServerlessCatDetectorStatusSigma"
            }
          }
        }
      }
    },
    "envVariables": [
      {
        "lambdaId": "all",
        "varKey": "SIGMA_AWS_ACC_ID",
        "varValue": null,
        "shouldPersist": false,
        "displayOnly": false,
        "editable": false
      }
    ],
    "packageJSON": {
      "dependencies": {
        "aws-sdk": {
          "name": "aws-sdk",
          "language": "javascript",
          "version": "2.176.0",
          "dev": true,
          "notRemovable": false
        },
        "aws-xray-sdk": {
          "name": "aws-xray-sdk",
          "version": "2.3.4",
          "language": "javascript"
        }
      }
    }
  },
  "PROJECT_META": {
    "projectName": "cat-recognition-sigma",
    "projectDescription": "",
    "projectVersion": "1.0.0",
    "projectRegion": "eu-west-1",
    "platform": "AWS",
    "platformRegions": {},
    "lastSave": 1565164410811
  },
  "VCS_STATE": {
    "provider": "GitHub",
    "repo": {
      "name": "cat-recognition-sigma",
      "url": "https://github.com/sebastianfeduniak/cat-recognition-sigma"
    }
  }
}